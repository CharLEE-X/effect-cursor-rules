---
description: 
globs: **/*-usecase.ts,**/usecase.ts
alwaysApply: false
---
# Effect-TS Usecase Implementation Patterns and Best Practices

## Import Patterns

### Always Use Relative Paths for Internal Imports
- **CRITICAL**: Never use `src/` aliases for internal imports
- Always use relative paths like `../../stores/blog/blog.store.js`
- Use package imports only for external dependencies
- Store files follow pattern: `store-name.store.ts`

```typescript
// ‚úÖ CORRECT - Relative paths for internal imports
import { BlogStore } from '../../stores/blog/blog.store.js'
import { SearchStore } from '../../stores/search/search.store.js'

// ‚úÖ CORRECT - Package imports for external dependencies
import { BlogPost, BlogPostId } from '@t6c/blog-domain'
import { Effect as E } from 'effect'

// ‚ùå WRONG - Never use src/ aliases
import { BlogStore } from 'src/stores/blog/blog.store.js'
```

## MANDATORY Usecase Structure

### Required Error Handling and Observability Pattern
**EVERY usecase MUST follow this exact pattern:**

```typescript
export const myUsecase = (input: MyInput) =>
  E.gen(function* () {
    // Business logic implementation here...
    const result = yield* businessLogic(input)
    return result
  }).pipe(
    // üî¥ MANDATORY: Simple error logging - NO custom messages
    E.tapError(E.logError),
    // üî¥ MANDATORY: Use E.orDie for unexpected errors OR allow domain errors to bubble up
    E.orDie, // Use this for usecases that should only return success
    // üî¥ MANDATORY: Observability span with relevant attributes
    E.withSpan('my-usecase-name', { 
      attributes: { 
        // Only include primitive values, not entire objects
        userId: input.userId,
        page: input.page 
      } 
    }),
  )
```

### Error Handling Strategy by Usecase Type

#### GET Usecases - Allow NotFoundError to Bubble Up
```typescript
// ‚úÖ CORRECT - Allow NotFoundError for client handling
export const getBlogByIdUsecase = (id: BlogPostId) =>
  E.gen(function* () {
    const blogStore = yield* BlogStore
    const userStore = yield* UserStore

    const blogPost = yield* blogStore.getById(id) // Can throw NotFoundError
    const author = yield* userStore.getAuthorById(blogPost.authorId)
    
    return BlogPostProfile.make({
      // ... transformation
    })
  }).pipe(
    E.tapError(E.logError), // ‚úÖ Simple logging only
    // ‚ùå NO E.orDie - let NotFoundError bubble up
    E.withSpan('getBlogByIdUsecase', { 
      attributes: { blogPostId: id } 
    })
  )
```

#### CREATE Usecases - Allow ConflictError to Bubble Up
```typescript
// ‚úÖ CORRECT - Allow ConflictError for client handling
export const createBlogPostUsecase = (input: CreateBlogPostInput) =>
  E.gen(function* () {
    const blogStore = yield* BlogStore
    
    const blogPost = BlogPost.make({
      // ... blog post creation
    })
    
    const result = yield* blogStore.create(blogPost) // Can throw ConflictError
    return result
  }).pipe(
    E.tapError(E.logError), // ‚úÖ Simple logging only
    // ‚ùå NO E.orDie - let ConflictError bubble up
    E.withSpan('createBlogPostUsecase', { 
      attributes: { authorId: input.authorId } 
    })
  )
```

#### UPDATE/DELETE Usecases - Use E.orDie for Unexpected Errors
```typescript
// ‚úÖ CORRECT - Use E.orDie for operations that should always succeed
export const updateBlogPostUsecase = (id: BlogPostId, patches: BlogPostPatches) =>
  E.gen(function* () {
    const blogStore = yield* BlogStore
    
    // Business logic that should not fail unexpectedly
    const result = yield* blogStore.updateAttributes(id, patches)
    return result
  }).pipe(
    E.tapError(E.logError), // ‚úÖ Simple logging only
    E.orDie, // ‚úÖ Die on any unexpected errors
    E.withSpan('updateBlogPostUsecase', { 
      attributes: { blogPostId: id } 
    })
  )
```

#### LIKE/DISLIKE Usecases - Allow Business Logic Errors
```typescript
// ‚úÖ CORRECT - Allow domain-specific errors to bubble up
export const likeBlogPostUsecase = (input: LikeInput) =>
  E.gen(function* () {
    const blogStore = yield* BlogStore
    const blogPost = yield* blogStore.getById(input.id)
    
    // Business logic validation
    if (blogPost.likes?.includes(input.userId)) {
      return yield* new BlogPostAlreadyLikedError(input)
    }
    
    const result = yield* blogStore.addLike(input.id, input.userId)
    return result
  }).pipe(
    E.tapError(E.logError), // ‚úÖ Simple logging only
    // ‚ùå NO E.orDie - let business logic errors bubble up
    E.withSpan('likeBlogPostUsecase', { 
      attributes: { blogPostId: input.id, userId: input.userId } 
    })
  )
```

### ‚ùå WRONG Error Handling Anti-Patterns

```typescript
// ‚ùå WRONG: Verbose error logging with custom messages
export const badUsecase = (input: MyInput) =>
  E.gen(function* () {
    const result = yield* businessLogic(input)
    return result
  }).pipe(
    // ‚ùå WRONG: Custom error messages and JSON.stringify
    E.tapError((error) =>
      E.logError('badUsecase failed', JSON.stringify({ error, input }))
    ),
    // ‚ùå WRONG: Manual error formatting
    E.catchAll((error) => 
      E.logError(`Failed to execute badUsecase: ${error.message}`)
    ),
    E.withSpan('badUsecase')
  )

// ‚ùå WRONG: Using E.orDie when domain errors should bubble up
export const getBlogByIdUsecase = (id: BlogPostId) =>
  E.gen(function* () {
    const result = yield* blogStore.getById(id) // NotFoundError should bubble up
    return result
  }).pipe(
    E.tapError(E.logError),
    E.orDie, // ‚ùå WRONG: This suppresses NotFoundError that client needs
    E.withSpan('getBlogByIdUsecase', { attributes: { id } })
  )
```

### Error Handling Decision Matrix

| Usecase Type | Expected Domain Errors | Error Handling Strategy |
|--------------|----------------------|------------------------|
| **GET** (getById, getBySlug) | `NotFoundError` | Let bubble up - client needs to handle |
| **CREATE** | `ConflictError` | Let bubble up - client needs to handle |
| **UPDATE/DELETE** | None expected | Use `E.orDie` - should always succeed |
| **LIKE/DISLIKE** | Business logic errors | Let bubble up - client needs to handle |
| **SEARCH/LIST** | None expected | Use `E.orDie` - should always succeed |

### ‚úÖ CORRECT Error Logging Pattern
```typescript
// ‚úÖ ALWAYS use this exact pattern - no custom messages
E.tapError(E.logError)

// ‚ùå NEVER use verbose logging
E.tapError((error) => E.logError('Custom message', JSON.stringify(error)))
E.tapError((error) => E.logError(`Failed to ${operation}:`, error.message))
E.catchAll((error) => E.logError('Something failed', error))
```

## BlogPostProfile Transformation Pattern

### When to Return BlogPostProfile vs BlogPost
- **BlogPostProfile**: For client-facing endpoints that need author information and like/dislike counts
- **BlogPost**: For internal operations and data storage

### BlogPostProfile Transformation Pattern
```typescript
export const getBlogByIdUsecase = (id: BlogPostId) =>
  E.gen(function* () {
    const blogStore = yield* BlogStore
    const userStore = yield* UserStore

    // Get the blog post
    const blogPost = yield* blogStore.getById(id)
    yield* E.annotateCurrentSpan('blogPost.id', blogPost.id)
    yield* E.annotateCurrentSpan('blogPost.authorId', blogPost.authorId)

    // Get the author information
    const author = yield* userStore.getAuthorById(blogPost.authorId)
    yield* E.annotateCurrentSpan('author.id', author.id)

    // Transform to BlogPostProfile
    const blogPostProfile = BlogPostProfile.make({
      id: blogPost.id,
      author, // Replace authorId with full author object
      cover: blogPost.cover,
      status: blogPost.status,
      htmlContent: blogPost.htmlContent,
      title: blogPost.title,
      slug: blogPost.slug,
      summary: blogPost.summary,
      category: blogPost.category,
      tags: blogPost.tags,
      readTime: blogPost.readTime,
      createdAt: blogPost.createdAt,
      updatedAt: blogPost.updatedAt,
      likesCount: blogPost.likes.length, // Count instead of array
      dislikesCount: blogPost.dislikes.length, // Count instead of array
      views: blogPost.views,
      featured: blogPost.featured,
      boost: blogPost.boost,
      publishedAt: blogPost.publishedAt,
    })

    return blogPostProfile
  }).pipe(
    E.tapError(E.logError),
    E.withSpan('getBlogByIdUsecase', { 
      attributes: { blogPostId: id } 
    }),
    E.annotateLogs({ 
      usecase: 'getBlogByIdUsecase', 
      blogPostId: id 
    })
  )
```

### Multiple BlogPost Transformation
```typescript
export const getBlogByAuthorIdUsecase = (authorId: UserId) =>
  E.gen(function* () {
    const blogStore = yield* BlogStore
    const userStore = yield* UserStore

    const blogPosts = yield* blogStore.getByAuthorId(authorId)
    yield* E.annotateCurrentSpan('blogPostsCount', blogPosts.length)

    // Get author once for all blog posts
    const author = yield* userStore.getAuthorById(authorId)
    yield* E.annotateCurrentSpan('author.id', author.id)

    // Transform each blog post to BlogPostProfile
    const blogPostProfiles = blogPosts.map((blogPost) =>
      BlogPostProfile.make({
        id: blogPost.id,
        author, // Same author for all posts
        // ... rest of transformation
      })
    )

    return blogPostProfiles
  }).pipe(
    E.tapError(E.logError),
    // ‚ùå NO E.orDie - let NotFoundError bubble up
    E.withSpan('getBlogByAuthorIdUsecase', { 
      attributes: { authorId } 
    })
  )
```

### Handler Dependencies for BlogPostProfile
When usecases return BlogPostProfile, handlers must provide both stores:

```typescript
export const handler = _handler.pipe(
  E.provide(BlogStore.Default),
  E.provide(UserStore.Default), // Required for author information
  toHandler,
)
```

### Complete Example with Mandatory Patterns
```typescript
/**
 * Creates a new blog post with default values
 * 
 * @param input - The input for the blog post containing authorId
 * @returns The created blog post with all default values set
 */
export const createBlogPostUsecase = (input: CreateBlogPostInput) =>
  E.gen(function* () {
    // Generate unique ID for the blog post
    const blogPostId = BlogPostId.make(randomUUID())
    
    // Create blog post data structure with business logic
    const blogPostData = BlogPost.make({
      id: blogPostId,
      authorId: input.authorId,
      status: 'new' as const,
      htmlContent: '',
      title: 'placeholder',
      slug: 'placeholder',
      summary: 'placeholder',
      category: {
        name: CategoryName.make('placeholder'),
        slug: CategorySlug.make('placeholder'),
      },
      tags: [],
      readTime: 0,
      createdAt: new Date(),
      updatedAt: new Date(),
      likes: [],
      dislikes: [],
      views: 0,
      popularityScore: 0,
      featured: false,
      keywords: [],
      searchableContent: 'placeholder',
    })
    
    // Store the blog post
    const blogStore = yield* BlogStore
    const createdBlogPost = yield* blogStore.create(blogPostData)
    
    return createdBlogPost
  }).pipe(
    // ‚úÖ CORRECT: Simple error logging and proper error handling
    E.tapError(E.logError),
    // ‚ùå NO E.orDie - let ConflictError bubble up for client handling
    E.withSpan('createBlogPostUsecase', { 
      attributes: { authorId: input.authorId } 
    })
  )
```

## Store Injection Pattern

### Service Dependency Injection
- Inject stores using `yield* StoreName` pattern
- Use Effect.gen for business logic implementation
- Handle store dependencies through Effect context

```typescript
export const getBlogPostUsecase = (input: GetBlogPostInput) =>
  E.gen(function* () {
    const blogStore = yield* BlogStore
    const blogPost = yield* blogStore.getById(input.id)
    return blogPost
  }).pipe(
    E.tapError(E.logError),
    // ‚ùå NO E.orDie - let NotFoundError bubble up
    E.withSpan('getBlogPostUsecase', { 
      attributes: { blogPostId: input.id } 
    })
  )
```

## Observability Best Practices

### ‚úÖ CORRECT Observability Patterns

```typescript
export const getBlogByIdUsecase = (id: BlogPostId) =>
  E.gen(function* () {
    const blogStore = yield* BlogStore
    const userStore = yield* UserStore

    const blogPost = yield* blogStore.getById(id)
    // ‚úÖ CORRECT: Annotate specific primitive values, not entire objects
    yield* E.annotateCurrentSpan('blogPost.id', blogPost.id)
    yield* E.annotateCurrentSpan('blogPost.authorId', blogPost.authorId)

    const author = yield* userStore.getAuthorById(blogPost.authorId)
    yield* E.annotateCurrentSpan('author.id', author.id)

    const blogPostProfile = BlogPostProfile.make({
      // ... business logic transformation
    })

    return blogPostProfile
  }).pipe(
    // ‚úÖ CORRECT: Simple error logging without custom messages
    E.tapError(E.logError),
    // ‚úÖ CORRECT: Let NotFoundError bubble up (no E.orDie)
    E.withSpan('getBlogByIdUsecase', { 
      attributes: { 
        // ‚úÖ CORRECT: Only primitive values in span attributes
        blogPostId: id 
      } 
    })
  )
```

### ‚ùå WRONG Observability Anti-Patterns

```typescript
// ‚ùå WRONG: Excessive manual logging and verbose error handling
export const badUsecase = (input: MyInput) =>
  E.gen(function* () {
    yield* E.logInfo('badUsecase started', JSON.stringify(input)) // ‚ùå Unnecessary
    
    const result = yield* businessLogic(input)
    yield* E.annotateCurrentSpan('result', JSON.stringify(result)) // ‚ùå Large objects
    
    yield* E.logInfo('badUsecase completed', JSON.stringify(result)) // ‚ùå Redundant
    return result
  }).pipe(
    // ‚ùå WRONG: Custom error messages and JSON.stringify
    E.tapError((error) =>
      E.logError('badUsecase failed', JSON.stringify({ error, input }))
    ),
    E.withSpan('badUsecase', { attributes: { input } }) // ‚ùå Complex objects
  )
```

### Span Annotation Guidelines

```typescript
// ‚úÖ CORRECT: Annotate primitive values and key metrics
yield* E.annotateCurrentSpan('blogPost.likesCount', blogPost.likes.length)
yield* E.annotateCurrentSpan('userAlreadyLiked', blogPost.likes?.includes(userId))
yield* E.annotateCurrentSpan('finalLikesCount', result.likesCount)

// ‚ùå WRONG: Annotating large objects
yield* E.annotateCurrentSpan('blogPost', JSON.stringify(blogPost))
yield* E.annotateCurrentSpan('result', JSON.stringify(result))
```

### Required Observability Pattern
```typescript
// ‚úÖ ALWAYS use this exact pattern
.pipe(
  E.tapError(E.logError), // Simple error logging
  E.orDie, // OR let domain errors bubble up
  E.withSpan('usecase-name', { 
    attributes: { 
      primitiveKey: primitiveValue // Only primitive attributes
    } 
  })
)
```

## Data Transformation with Proper Error Handling

### Business Logic Implementation
```typescript
export const getBlogPageUsecase = (input: GetBlogPageInput) =>
  E.gen(function* () {
    const searchStore = yield* SearchStore

    // Get raw data from store
    const algoliaResponse = yield* searchStore.getPage(input)
    yield* E.annotateCurrentSpan('totalHits', algoliaResponse.nbHits)
    yield* E.annotateCurrentSpan('totalPages', algoliaResponse.nbPages)
    
    // Transform Algolia hits to BlogPost objects (business logic)
    const items = yield* E.forEach(
      algoliaResponse.hits,
      S.decodeUnknown(BlogSchema)
    )
    
    // Calculate pagination (business logic in usecase, not store)
    const totalItems = algoliaResponse.nbHits
    const totalPages = Math.ceil(totalItems / input.limit)
    const hasNext = input.page < totalPages - 1
    const hasPrev = input.page > 1
    
    const result = PaginationSchema(BlogPost).make({
      items,
      totalItems,
      totalPages,
      currentPage: input.page,
      perPage: input.limit,
      hasNext,
      hasPrev,
    })
    
    return result
  }).pipe(
    E.tapError(E.logError),
    E.withSpan('getBlogPageUsecase', { 
      attributes: { 
        page: input.page, 
        limit: input.limit, 
        sortBy: input.sortBy 
      } 
    }),
    E.annotateLogs({ 
      usecase: 'getBlogPageUsecase', 
      page: input.page, 
      limit: input.limit 
    })
  )
```

## JSDoc Documentation Standards

### Comprehensive Documentation
```typescript
/**
 * Retrieves all available blog post categories with pagination
 * 
 * This usecase handles the business logic for fetching categories:
 * - Calls SearchStore to get raw Algolia facet data
 * - Transforms facet hits into BlogPostCategory domain objects
 * - Applies pagination logic and calculates page metadata
 * - Returns paginated results with proper navigation flags
 * 
 * The transformation converts Algolia's facet structure:
 * - `facetHit.value` becomes both `name` and `slug` for categories
 * - Applies proper domain object construction with branded types
 * - Handles empty results gracefully
 * 
 * @param input - Pagination parameters including page and limit
 * @returns Paginated list of blog post categories with navigation metadata
 * 
 * @example
 * ```typescript
 * const input = { page: 1, limit: 10 }
 * const result = yield* getAllCategoriesUsecase(input)
 * // Returns: PaginationSchema<BlogPostCategory> with items and metadata
 * ```
 * 
 * @throws {SearchError} When Algolia search fails
 * @throws {ParseError} When category data cannot be decoded
 */
export const getAllCategoriesUsecase = (input: GetAllCategoriesInput) =>
  // Implementation...
```

## Error Handling

### Business Logic Error Handling
```typescript
export const dislikeBlogPostUsecase = (input: LikeInput) =>
  E.gen(function* () {
    const blogStore = yield* BlogStore
    const blogPost = yield* blogStore.getById(input.id)
    
    // Business logic: Check if user has liked the post
    if (!blogPost.likes?.includes(input.userId)) {
      // Return domain error for business logic violation
      return yield* new BlogPostLikeNotFoundError(input)
    }
    
    // Continue with dislike logic...
    const updatedLikes = blogPost.likes.filter((id) => id !== input.userId)
    yield* blogStore.removeLike(input.id, input.userId)
    
    return LikeOutput.make({ likesCount: updatedLikes.length })
  }).pipe(
    E.tapError(E.logError),
    E.withSpan('dislikeBlogPostUsecase', { 
      attributes: { blogPostId: input.id, userId: input.userId } 
    }),
    E.annotateLogs({ 
      usecase: 'dislikeBlogPostUsecase', 
      blogPostId: input.id, 
      userId: input.userId 
    })
  )
```

## Usecase Responsibilities

### ‚úÖ What Usecases Should Do
- **Business Logic**: Implement domain-specific rules and validation
- **Data Orchestration**: Coordinate between multiple stores
- **Data Transformation**: Convert between external and domain formats
- **Pagination Logic**: Calculate pagination metadata and navigation
- **Error Context**: Add business context to errors
- **Input Validation**: Validate business rules beyond schema validation
- **Key Metrics Tracking**: Annotate spans with relevant business metrics
- **BlogPostProfile Creation**: Transform BlogPost to BlogPostProfile for client endpoints

### ‚ùå What Usecases Should NOT Do
- **Direct Database Access**: Always use stores for data operations
- **HTTP Concerns**: No response formatting or status codes
- **External Service Calls**: Use stores for external service integration
- **Schema Encoding/Decoding**: Let stores handle data transformation
- **Infrastructure Concerns**: No direct AWS SDK or external library usage
- **Excessive Logging**: Avoid verbose start/completion logging
- **Large Object Serialization**: Don't JSON.stringify large objects in logs

## Testing Patterns

### Usecase Testing with Mocked Stores
```typescript
describe('createBlogPostUsecase', () => {
  it.effect('should create blog post with proper error handling', () =>
    E.gen(function* () {
      const input = { authorId: UserId.make('test-user') }
      const result = yield* createBlogPostUsecase(input)
      
      expect(result.id).toBeDefined()
      expect(result.authorId).toBe(input.authorId)
      expect(result.status).toBe('new')
      expect(result.title).toBe('placeholder')
    }).pipe(
      E.provide(
        BlogStore.makeTestService({
          create: (blogPost) => E.succeed(blogPost)
        })
      )
    )
  )
  
  it.effect('should handle store errors appropriately', () =>
    E.gen(function* () {
      const input = { authorId: UserId.make('test-user') }
      const result = yield* E.exit(createBlogPostUsecase(input))
      
      expect(Exit.isFailure(result)).toBe(true)
      if (Exit.isFailure(result)) {
        expect(result.cause._tag).toBe('ConflictError')
      }
    }).pipe(
      E.provide(
        BlogStore.makeTestService({
          create: () => new ConflictError({ resource: 'BlogPost', id: 'test-id' })
        })
      )
    )
  )
})
```

### BlogPostProfile Testing Pattern
```typescript
describe('getBlogByIdUsecase', () => {
  it.effect('should return blog post profile with author information', () =>
    E.gen(function* () {
      const mockAuthor = Author.make({
        id: mockUser1.id,
        username: mockUser1.username,
        avatar: mockUser1.avatar,
      })
      
      const expectedProfile = BlogPostProfile.make({
        id: mockBlogPost1.id,
        author: mockAuthor,
        // ... rest of profile fields
        likesCount: mockBlogPost1.likes.length,
        dislikesCount: mockBlogPost1.dislikes.length,
      })
      
      const result = yield* getBlogByIdUsecase(mockBlogPost1.id)
      expect(result).toEqual(expectedProfile)
    }).pipe(
      E.provide(
        BlogStore.makeTestService({
          getById: () => E.succeed(mockBlogPost1)
        })
      ),
      E.provide(
        UserStore.makeTestService({
          getAuthorById: () => E.succeed(mockAuthor)
        })
      )
    )
  )
})
```

## ‚ùå CRITICAL ANTI-PATTERNS - Never Do These

### Obvious Comments That Add No Value
```typescript
// ‚ùå WRONG: Comments that just repeat what code is doing
// Transform Algolia hits to BlogPostItem objects using BlogItemSchema
const items = yield* S.decodeUnknown(S.Array(BlogItemSchema))(res.hits)

// ‚ùå WRONG: Comments stating the obvious
// Get the blog post to check current likes
const blogPost = yield* blogStore.getById(input.id)

// ‚ùå WRONG: Comments that add no value
// Calculate pagination metadata
const hasNext = currentPage < totalPages - 1

// ‚ùå WRONG: Comments that just describe the next line
// Add the like
yield* blogStore.addLike(input.id, input.userId)

// ‚ùå WRONG: Comments that repeat function names
// Store the blog post in the database
yield* blogStore.create(blogPost)

// ‚úÖ CORRECT: No obvious comments - let the code speak for itself
const items = yield* S.decodeUnknown(S.Array(BlogItemSchema))(res.hits)
const blogPost = yield* blogStore.getById(input.id)
const hasNext = currentPage < totalPages - 1
yield* blogStore.addLike(input.id, input.userId)
yield* blogStore.create(blogPost)

// ‚úÖ CORRECT: Only comment complex business logic that needs explanation
// Apply boost multiplier only if boost hasn't expired and post is published
if (blogPost.boost && blogPost.boost.expiresAt > new Date() && blogPost.status === 'published') {
  popularityScore *= blogPost.boost.value
}
```

### Verbose Error Logging
```typescript
// ‚ùå WRONG: Verbose error logging with custom messages
E.tapError((error) =>
  E.logError('getBlogPostUsecase failed', JSON.stringify({ error, input })),
)

// ‚ùå WRONG: Start/complete logging with JSON.stringify
yield* E.logInfo('getBlogPostUsecase started', JSON.stringify(input))
yield* E.logInfo('getBlogPostUsecase completed successfully', JSON.stringify(result))

// ‚ùå WRONG: Manual error formatting
E.catchAll((error) => 
  E.logError(`Failed to execute usecase: ${error.message}`)
)

// ‚úÖ CORRECT: Simple error logging only
E.tapError(E.logError)
```

### Verbose Observability
```typescript
// ‚ùå WRONG: Annotating entire objects with JSON.stringify
yield* E.annotateCurrentSpan('algoliaResponse', JSON.stringify(algoliaResponse))
yield* E.annotateCurrentSpan('paginationResult', JSON.stringify(pagination))
yield* E.annotateCurrentSpan('input', JSON.stringify(input))

// ‚ùå WRONG: Annotating complex objects
yield* E.annotateCurrentSpan('blogPost', blogPost)
yield* E.annotateCurrentSpan('author', author)

// ‚úÖ CORRECT: Annotate specific primitive values only
yield* E.annotateCurrentSpan('totalHits', res.nbHits)
yield* E.annotateCurrentSpan('totalPages', res.nbPages)
yield* E.annotateCurrentSpan('blogPostId', blogPost.id)
yield* E.annotateCurrentSpan('authorId', author.id)
```

### Comment Guidelines
- **NEVER** add comments that just repeat what the code is doing
- **NEVER** add comments that state the obvious operation
- **ONLY** comment complex business logic that needs explanation
- **ONLY** comment non-obvious algorithms or calculations
- **USE** JSDoc for public APIs, not inline comments for obvious operations
- **PREFER** self-documenting code over comments

### When Comments Are Acceptable
```typescript
// ‚úÖ ACCEPTABLE: Complex business logic explanation
// Apply popularity boost only for published posts with active, non-expired boosts
// Boost calculation: base score * boost multiplier, capped at 1000
if (blogPost.status === 'published' && 
    blogPost.boost && 
    blogPost.boost.expiresAt > new Date()) {
  const boostedScore = Math.min(popularityScore * blogPost.boost.value, 1000)
  popularityScore = boostedScore
}

// ‚úÖ ACCEPTABLE: Non-obvious algorithm explanation  
// Use Algolia's pagination: page 0-indexed in API, but 1-indexed for users
const algoliaPage = Math.max(0, input.page - 1)

// ‚úÖ ACCEPTABLE: Important business rule clarification
// Users can only like posts once - remove existing like before adding dislike
if (blogPost.likes.includes(input.userId)) {
  yield* blogStore.removeLike(input.id, input.userId)
}
```

This rule ensures clean, readable code without redundant comments that provide no value.
